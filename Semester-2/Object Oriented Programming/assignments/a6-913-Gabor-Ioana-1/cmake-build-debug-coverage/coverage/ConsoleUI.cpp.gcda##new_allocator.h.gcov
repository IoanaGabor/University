        -:    0:Source:/usr/include/c++/11/ext/new_allocator.h
        -:    0:Graph:/home/ioana/second_semester/oop/assignments/a6-913-Gabor-Ioana-1/cmake-build-debug-coverage/CMakeFiles/a6_913_Gabor_Ioana_1.dir/ui/ConsoleUI.cpp.gcno
        -:    0:Data:/home/ioana/second_semester/oop/assignments/a6-913-Gabor-Ioana-1/cmake-build-debug-coverage/CMakeFiles/a6_913_Gabor_Ioana_1.dir/ui/ConsoleUI.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2021 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/new_allocator.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _NEW_ALLOCATOR_H
        -:   30:#define _NEW_ALLOCATOR_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <new>
        -:   34:#include <bits/functexcept.h>
        -:   35:#include <bits/move.h>
        -:   36:#if __cplusplus >= 201103L
        -:   37:#include <type_traits>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  /**
        -:   45:   *  @brief  An allocator that uses global new, as per C++03 [20.4.1].
        -:   46:   *  @ingroup allocators
        -:   47:   *
        -:   48:   *  This is precisely the allocator defined in the C++ Standard.
        -:   49:   *    - all allocation calls operator new
        -:   50:   *    - all deallocation calls operator delete
        -:   51:   *
        -:   52:   *  @tparam  _Tp  Type of allocated object.
        -:   53:   */
        -:   54:  template<typename _Tp>
        -:   55:    class new_allocator
        -:   56:    {
        -:   57:    public:
        -:   58:      typedef _Tp        value_type;
        -:   59:      typedef std::size_t     size_type;
        -:   60:      typedef std::ptrdiff_t  difference_type;
        -:   61:#if __cplusplus <= 201703L
        -:   62:      typedef _Tp*       pointer;
        -:   63:      typedef const _Tp* const_pointer;
        -:   64:      typedef _Tp&       reference;
        -:   65:      typedef const _Tp& const_reference;
        -:   66:
        -:   67:      template<typename _Tp1>
        -:   68:	struct rebind
        -:   69:	{ typedef new_allocator<_Tp1> other; };
        -:   70:#endif
        -:   71:
        -:   72:#if __cplusplus >= 201103L
        -:   73:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   74:      // 2103. propagate_on_container_move_assignment
        -:   75:      typedef std::true_type propagate_on_container_move_assignment;
        -:   76:#endif
        -:   77:
        -:   78:      _GLIBCXX20_CONSTEXPR
   69855*:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEEC2Ev called 246 returned 100% blocks executed 100%
      246:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIcEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorImEC2Ev:
function _ZN9__gnu_cxx13new_allocatorImEC2Ev called 123 returned 100% blocks executed 100%
      123:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorI5EventEC2Ev:
function _ZN9__gnu_cxx13new_allocatorI5EventEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEEC2Ev called 246 returned 100% blocks executed 100%
      246:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEEC2Ev called 123 returned 100% blocks executed 100%
      123:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEEC2Ev called 123 returned 100% blocks executed 100%
      123:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEEC2Ev called 123 returned 100% blocks executed 100%
      123:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEEC2Ev called 123 returned 100% blocks executed 100%
      123:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEEC2Ev called 246 returned 100% blocks executed 100%
      246:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEEC2Ev called 16446 returned 100% blocks executed 100%
    16446:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev called 483 returned 100% blocks executed 100%
      483:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIccEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairIccEEC2Ev called 483 returned 100% blocks executed 100%
      483:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEEC2Ev called 483 returned 100% blocks executed 100%
      483:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIlEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIlEC2Ev called 16869 returned 100% blocks executed 100%
    16869:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPlEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIPlEC2Ev called 33738 returned 100% blocks executed 100%
    33738:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   80:
        -:   81:      _GLIBCXX20_CONSTEXPR
  272181*:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEC2ERKS9_:
function _ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEC2ERKS9_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEEC2ERKS5_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEEC2ERKS5_ called 90399 returned 100% blocks executed 100%
    90399:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIccEEC2ERKS3_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIccEEC2ERKS3_ called 90399 returned 100% blocks executed 100%
    90399:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS7_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS7_ called 90399 returned 100% blocks executed 100%
    90399:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEEC2ERKS7_:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEEC2ERKS7_ called 369 returned 100% blocks executed 100%
      369:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEEC2ERKSI_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEEC2ERKSI_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEEC2ERKSD_:
function _ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEEC2ERKSD_ called 246 returned 100% blocks executed 100%
      246:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEEC2ERKSD_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEEC2ERKSD_ called 369 returned 100% blocks executed 100%
      369:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2ERKS1_:
function _ZN9__gnu_cxx13new_allocatorIcEC2ERKS1_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorI5EventEC2ERKS2_:
function _ZN9__gnu_cxx13new_allocatorI5EventEC2ERKS2_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   83:
        -:   84:      template<typename _Tp1>
        -:   85:	_GLIBCXX20_CONSTEXPR
        -:   86:	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   87:
        -:   88:#if __cplusplus <= 201703L
  342036*:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEED2Ev:
function _ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEED2Ev called 246 returned 100% blocks executed 100%
      246:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcED2Ev:
function _ZN9__gnu_cxx13new_allocatorIcED2Ev called 0 returned 0% blocks executed 0%
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorImED2Ev:
function _ZN9__gnu_cxx13new_allocatorImED2Ev called 123 returned 100% blocks executed 100%
      123:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorI5EventED2Ev:
function _ZN9__gnu_cxx13new_allocatorI5EventED2Ev called 0 returned 0% blocks executed 0%
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEED2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEED2Ev called 615 returned 100% blocks executed 100%
      615:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEED2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEED2Ev called 369 returned 100% blocks executed 100%
      369:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEED2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEED2Ev called 492 returned 100% blocks executed 100%
      492:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEED2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEED2Ev called 123 returned 100% blocks executed 100%
      123:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEED2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEED2Ev called 0 returned 0% blocks executed 0%
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEED2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEED2Ev called 123 returned 100% blocks executed 100%
      123:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEED2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEED2Ev called 246 returned 100% blocks executed 100%
      246:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEED2Ev:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEED2Ev called 16446 returned 100% blocks executed 100%
    16446:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 90882 returned 100% blocks executed 100%
    90882:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIccEED2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairIccEED2Ev called 90882 returned 100% blocks executed 100%
    90882:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEED2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEED2Ev called 90882 returned 100% blocks executed 100%
    90882:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EED2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EED2Ev called 0 returned 0% blocks executed 0%
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIlED2Ev:
function _ZN9__gnu_cxx13new_allocatorIlED2Ev called 16869 returned 100% blocks executed 100%
    16869:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPlED2Ev:
function _ZN9__gnu_cxx13new_allocatorIPlED2Ev called 33738 returned 100% blocks executed 100%
    33738:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   90:
        -:   91:      pointer
        -:   92:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   93:      { return std::__addressof(__x); }
        -:   94:
        -:   95:      const_pointer
        -:   96:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   97:      { return std::__addressof(__x); }
        -:   98:#endif
        -:   99:
        -:  100:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:  101:      // about what the return value is when __n == 0.
        -:  102:      _GLIBCXX_NODISCARD _Tp*
  249219*:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
  249219*:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    #####:  116:	      std::__throw_bad_array_new_length();
    #####:  117:	    std::__throw_bad_alloc();
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
  249219*:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE8allocateEmPKv called 1095 returned 100% blocks executed 62%
     1095:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
     1095:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
     1095:  111-block  0
call    0 returned 1095
branch  1 taken 0 (fallthrough)
branch  2 taken 1095
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
     1095:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
     1095:  127-block  0
call    0 returned 1095
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorI5EventE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorI5EventE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv called 151038 returned 100% blocks executed 83%
   151038:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
   151038:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
   151038:  111-block  0
call    0 returned 151038
branch  1 taken 0 (fallthrough)
branch  2 taken 151038
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
        -:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
        -:  116:	      std::__throw_bad_array_new_length();
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
   151038:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   151038:  127-block  0
call    0 returned 151038
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEmPKv called 123 returned 100% blocks executed 62%
      123:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
      123:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
      123:  111-block  0
call    0 returned 123
branch  1 taken 0 (fallthrough)
branch  2 taken 123
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
      123:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      123:  127-block  0
call    0 returned 123
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorImE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorImE8allocateEmPKv called 183 returned 100% blocks executed 62%
      183:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
      183:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
      183:  111-block  0
call    0 returned 183
branch  1 taken 0 (fallthrough)
branch  2 taken 183
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
      183:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      183:  127-block  0
call    0 returned 183
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE8allocateEmPKv called 123 returned 100% blocks executed 62%
      123:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
      123:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
      123:  111-block  0
call    0 returned 123
branch  1 taken 0 (fallthrough)
branch  2 taken 123
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
      123:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      123:  127-block  0
call    0 returned 123
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEmPKv called 123 returned 100% blocks executed 62%
      123:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
      123:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
      123:  111-block  0
call    0 returned 123
branch  1 taken 0 (fallthrough)
branch  2 taken 123
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
      123:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      123:  127-block  0
call    0 returned 123
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE8allocateEmPKv called 246 returned 100% blocks executed 62%
      246:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
      246:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
      246:  111-block  0
call    0 returned 246
branch  1 taken 0 (fallthrough)
branch  2 taken 246
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
      246:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      246:  127-block  0
call    0 returned 246
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEE8allocateEmPKv called 123 returned 100% blocks executed 62%
      123:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
      123:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
      123:  111-block  0
call    0 returned 123
branch  1 taken 0 (fallthrough)
branch  2 taken 123
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
      123:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      123:  127-block  0
call    0 returned 123
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPlE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorIPlE8allocateEmPKv called 16869 returned 100% blocks executed 62%
    16869:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    16869:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    16869:  111-block  0
call    0 returned 16869
branch  1 taken 0 (fallthrough)
branch  2 taken 16869
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    16869:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    16869:  127-block  0
call    0 returned 16869
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIlE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorIlE8allocateEmPKv called 17049 returned 100% blocks executed 62%
    17049:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    17049:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    17049:  111-block  0
call    0 returned 17049
branch  1 taken 0 (fallthrough)
branch  2 taken 17049
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    17049:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    17049:  127-block  0
call    0 returned 17049
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE8allocateEmPKv called 16446 returned 100% blocks executed 62%
    16446:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    16446:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    16446:  111-block  0
call    0 returned 16446
branch  1 taken 0 (fallthrough)
branch  2 taken 16446
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    16446:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    16446:  127-block  0
call    0 returned 16446
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIccEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorISt4pairIccEE8allocateEmPKv called 45801 returned 100% blocks executed 62%
    45801:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    45801:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    45801:  111-block  0
call    0 returned 45801
branch  1 taken 0 (fallthrough)
branch  2 taken 45801
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    45801:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    45801:  127-block  0
call    0 returned 45801
        -:  128:      }
------------------
        -:  129:
        -:  130:      // __p is not permitted to be a null pointer.
        -:  131:      void
  249219*:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
  249219*:  145:	::operator delete(__p
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
  249219*:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEE10deallocateEPSA_m:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEE10deallocateEPSA_m called 123 returned 100% blocks executed 100%
      123:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
      123:  145:	::operator delete(__p
      123:  145-block  0
call    0 returned 123
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
      123:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmm:
function _ZN9__gnu_cxx13new_allocatorImE10deallocateEPmm called 183 returned 100% blocks executed 100%
      183:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
      183:  145:	::operator delete(__p
      183:  145-block  0
call    0 returned 183
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
      183:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorI5EventE10deallocateEPS1_m:
function _ZN9__gnu_cxx13new_allocatorI5EventE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
    #####:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm:
function _ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm called 151038 returned 100% blocks executed 100%
   151038:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
   151038:  145:	::operator delete(__p
   151038:  145-block  0
call    0 returned 151038
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
   151038:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE10deallocateEPSC_m:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE10deallocateEPSC_m called 246 returned 100% blocks executed 100%
      246:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
      246:  145:	::operator delete(__p
      246:  145-block  0
call    0 returned 246
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
      246:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS7_m:
function _ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS7_m called 123 returned 100% blocks executed 100%
      123:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
      123:  145:	::operator delete(__p
      123:  145-block  0
call    0 returned 123
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
      123:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE10deallocateEPSC_m:
function _ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE10deallocateEPSC_m called 123 returned 100% blocks executed 100%
      123:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
      123:  145:	::operator delete(__p
      123:  145-block  0
call    0 returned 123
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
      123:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE10deallocateEPSH_m:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE10deallocateEPSH_m called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
    #####:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS6_m:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS6_m called 123 returned 100% blocks executed 100%
      123:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
      123:  145:	::operator delete(__p
      123:  145-block  0
call    0 returned 123
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
      123:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE10deallocateEPS5_m:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE10deallocateEPS5_m called 16446 returned 100% blocks executed 100%
    16446:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    16446:  145:	::operator delete(__p
    16446:  145-block  0
call    0 returned 16446
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
    16446:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE10deallocateEPS3_m:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE10deallocateEPS3_m called 1095 returned 100% blocks executed 100%
     1095:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
     1095:  145:	::operator delete(__p
     1095:  145-block  0
call    0 returned 1095
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
     1095:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPlE10deallocateEPS1_m:
function _ZN9__gnu_cxx13new_allocatorIPlE10deallocateEPS1_m called 16869 returned 100% blocks executed 100%
    16869:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    16869:  145:	::operator delete(__p
    16869:  145-block  0
call    0 returned 16869
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
    16869:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_m:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_m called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
    #####:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIccEE10deallocateEPS2_m:
function _ZN9__gnu_cxx13new_allocatorISt4pairIccEE10deallocateEPS2_m called 45801 returned 100% blocks executed 100%
    45801:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    45801:  145:	::operator delete(__p
    45801:  145-block  0
call    0 returned 45801
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
    45801:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE10deallocateEPS4_m:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE10deallocateEPS4_m called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
    #####:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE10deallocateEPS8_m:
function _ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE10deallocateEPS8_m called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
    #####:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIlE10deallocateEPlm:
function _ZN9__gnu_cxx13new_allocatorIlE10deallocateEPlm called 17049 returned 100% blocks executed 100%
    17049:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    17049:  145:	::operator delete(__p
    17049:  145-block  0
call    0 returned 17049
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
    17049:  150:      }
------------------
        -:  151:
        -:  152:#if __cplusplus <= 201703L
        -:  153:      size_type
  113946*:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
  113946*:  155:      { return _M_max_size(); }
------------------
_ZNK9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  155:      { return _M_max_size(); }
    %%%%%:  155-block  0
call    0 never executed
------------------
_ZNK9__gnu_cxx13new_allocatorISt4pairIccEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorISt4pairIccEE8max_sizeEv called 1686 returned 100% blocks executed 100%
     1686:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
     1686:  155:      { return _M_max_size(); }
     1686:  155-block  0
call    0 returned 1686
------------------
_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  155:      { return _M_max_size(); }
    %%%%%:  155-block  0
call    0 never executed
------------------
_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  155:      { return _M_max_size(); }
    %%%%%:  155-block  0
call    0 never executed
------------------
_ZNK9__gnu_cxx13new_allocatorIlE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorIlE8max_sizeEv called 180 returned 100% blocks executed 100%
      180:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
      180:  155:      { return _M_max_size(); }
      180:  155-block  0
call    0 returned 180
------------------
_ZNK9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  155:      { return _M_max_size(); }
    %%%%%:  155-block  0
call    0 never executed
------------------
_ZNK9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE8max_sizeEv called 2190 returned 100% blocks executed 100%
     2190:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
     2190:  155:      { return _M_max_size(); }
     2190:  155-block  0
call    0 returned 2190
------------------
_ZNK9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  155:      { return _M_max_size(); }
    %%%%%:  155-block  0
call    0 never executed
------------------
_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv called 366 returned 100% blocks executed 100%
      366:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
      366:  155:      { return _M_max_size(); }
      366:  155-block  0
call    0 returned 366
------------------
_ZNK9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE8max_sizeEv called 123 returned 100% blocks executed 100%
      123:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
      123:  155:      { return _M_max_size(); }
      123:  155-block  0
call    0 returned 123
------------------
_ZNK9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE8max_sizeEv called 123 returned 100% blocks executed 100%
      123:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
      123:  155:      { return _M_max_size(); }
      123:  155-block  0
call    0 returned 123
------------------
_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv called 109278 returned 100% blocks executed 100%
   109278:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
   109278:  155:      { return _M_max_size(); }
   109278:  155-block  0
call    0 returned 109278
------------------
        -:  156:
        -:  157:#if __cplusplus >= 201103L
        -:  158:      template<typename _Up, typename... _Args>
        -:  159:	void
   92658*:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
   92658*:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  162-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE9constructIS4_JS4_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE9constructIS4_JS4_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  162-block  0
call    0 never executed
call    1 never executed
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE9constructISH_JSH_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE9constructISH_JSH_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  162-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE9constructIS8_JS8_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE9constructIS8_JS8_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  162-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIccEE9constructIS2_JS2_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIccEE9constructIS2_JS2_EEEvPT_DpOT0_ called 1383 returned 100% blocks executed 100%
     1383:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
     1383:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     1383:  162-block  0
call    0 returned 1383
call    1 returned 1383
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESB_IJEEEEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESB_IJEEEEEvPT_DpOT0_ called 16446 returned 100% blocks executed 67%
    16446:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    16446:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    16446:  162-block  0
call    0 returned 16446
call    1 returned 16446
call    2 returned 16446
call    3 returned 16446
call    4 returned 16446
call    5 returned 16446
branch  6 taken 16446 (fallthrough)
branch  7 taken 0 (throw)
    16446:  162-block  1
    $$$$$:  162-block  2
call    8 never executed
    $$$$$:  162-block  3
    $$$$$:  162-block  4
------------------
_ZN9__gnu_cxx13new_allocatorIcE9constructIcJcEEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorIcE9constructIcJcEEEvPT_DpOT0_ called 1680 returned 100% blocks executed 100%
     1680:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
     1680:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     1680:  162-block  0
call    0 returned 1680
call    1 returned 1680
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  162-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  162-block  1
    $$$$$:  162-block  2
call    5 never executed
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE9constructIS4_JRKS4_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE9constructIS4_JRKS4_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  162-block  0
call    0 never executed
call    1 never executed
------------------
_ZN9__gnu_cxx13new_allocatorIlE9constructIlJRKlEEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorIlE9constructIlJRKlEEEvPT_DpOT0_ called 32046 returned 100% blocks executed 100%
    32046:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    32046:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    32046:  162-block  0
call    0 returned 32046
call    1 returned 32046
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEE9constructIS6_JRKSt6localeRNSt15regex_constants18syntax_option_typeEEEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEE9constructIS6_JRKSt6localeRNSt15regex_constants18syntax_option_typeEEEEvPT_DpOT0_ called 123 returned 100% blocks executed 86%
      123:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
      123:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
      123:  162-block  0
call    0 returned 123
call    1 returned 123
call    2 returned 123
call    3 returned 123
branch  4 taken 123 (fallthrough)
branch  5 taken 0 (throw)
      123:  162-block  1
    $$$$$:  162-block  2
call    6 never executed
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE9constructISH_JRlRKSG_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE9constructISH_JRlRKSG_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  162-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  162-block  1
    $$$$$:  162-block  2
call    6 never executed
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE9constructIS6_JS6_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE9constructIS6_JS6_EEEvPT_DpOT0_ called 2112 returned 100% blocks executed 100%
     2112:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
     2112:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     2112:  162-block  0
call    0 returned 2112
call    1 returned 2112
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_ called 2712 returned 100% blocks executed 100%
     2712:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
     2712:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     2712:  162-block  0
call    0 returned 2712
call    1 returned 2712
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE9constructIS3_JS3_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE9constructIS3_JS3_EEEvPT_DpOT0_ called 35913 returned 100% blocks executed 83%
    35913:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    35913:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    35913:  162-block  0
call    0 returned 35913
call    1 returned 35913
call    2 returned 35913
branch  3 taken 35913 (fallthrough)
branch  4 taken 0 (throw)
    35913:  162-block  1
    $$$$$:  162-block  2
call    5 never executed
------------------
_ZN9__gnu_cxx13new_allocatorImE9constructImJRKmEEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorImE9constructImJRKmEEEvPT_DpOT0_ called 243 returned 100% blocks executed 100%
      243:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
      243:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
      243:  162-block  0
call    0 returned 243
call    1 returned 243
------------------
        -:  163:
        -:  164:      template<typename _Up>
        -:  165:	void
   54222*:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
   54222*:  168:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEE7destroyIS6_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEE7destroyIS6_EEvPT_ called 123 returned 100% blocks executed 100%
      123:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
      123:  168:	{ __p->~_Up(); }
      123:  168-block  0
call    0 returned 123
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE7destroyIS8_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE7destroyIS8_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  168:	{ __p->~_Up(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIccEE7destroyIS2_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIccEE7destroyIS2_EEvPT_ called 540 returned 100% blocks executed 100%
      540:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
      540:  168:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIcE7destroyIcEEvPT_:
function _ZN9__gnu_cxx13new_allocatorIcE7destroyIcEEvPT_ called 0 returned 0% blocks executed 0%
    #####:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  168:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  168:	{ __p->~_Up(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE7destroyIS4_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE7destroyIS4_EEvPT_ called 16446 returned 100% blocks executed 100%
    16446:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
    16446:  168:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE7destroyIS4_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE7destroyIS4_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  168:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIlE7destroyIlEEvPT_:
function _ZN9__gnu_cxx13new_allocatorIlE7destroyIlEEvPT_ called 32046 returned 100% blocks executed 100%
    32046:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
    32046:  168:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE7destroyISH_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE7destroyISH_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  168:	{ __p->~_Up(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE7destroyIS3_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE7destroyIS3_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  168:	{ __p->~_Up(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE7destroyIS6_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE7destroyIS6_EEvPT_ called 4824 returned 100% blocks executed 100%
     4824:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
     4824:  168:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorImE7destroyImEEvPT_:
function _ZN9__gnu_cxx13new_allocatorImE7destroyImEEvPT_ called 243 returned 100% blocks executed 100%
      243:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
      243:  168:	{ __p->~_Up(); }
------------------
        -:  169:#else
        -:  170:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  171:      // 402. wrong new expression in [some_] allocator::construct
        -:  172:      void
        -:  173:      construct(pointer __p, const _Tp& __val)
        -:  174:      { ::new((void *)__p) _Tp(__val); }
        -:  175:
        -:  176:      void
        -:  177:      destroy(pointer __p) { __p->~_Tp(); }
        -:  178:#endif
        -:  179:#endif // ! C++20
        -:  180:
        -:  181:      template<typename _Up>
        -:  182:	friend _GLIBCXX20_CONSTEXPR bool
        -:  183:	operator==(const new_allocator&, const new_allocator<_Up>&)
        -:  184:	_GLIBCXX_NOTHROW
        -:  185:	{ return true; }
        -:  186:
        -:  187:#if __cpp_impl_three_way_comparison < 201907L
        -:  188:      template<typename _Up>
        -:  189:	friend _GLIBCXX20_CONSTEXPR bool
        -:  190:	operator!=(const new_allocator&, const new_allocator<_Up>&)
        -:  191:	_GLIBCXX_NOTHROW
        -:  192:	{ return false; }
        -:  193:#endif
        -:  194:
        -:  195:    private:
        -:  196:      _GLIBCXX_CONSTEXPR size_type
  363165*:  197:      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  198:      {
        -:  199:#if __PTRDIFF_MAX__ < __SIZE_MAX__
  363165*:  200:	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
        -:  201:#else
        -:  202:	return std::size_t(-1) / sizeof(_Tp);
        -:  203:#endif
        -:  204:      }
        -:  205:    };
        -:  206:
        -:  207:_GLIBCXX_END_NAMESPACE_VERSION
        -:  208:} // namespace
        -:  209:
        -:  210:#endif
