        -:    0:Source:/home/ioana/second_semester/oop/assignments/a6-913-Gabor-Ioana-1/app_tests/TestEvent.cpp
        -:    0:Graph:/home/ioana/second_semester/oop/assignments/a6-913-Gabor-Ioana-1/cmake-build-debug-coverage/CMakeFiles/a6_913_Gabor_Ioana_1.dir/app_tests/TestEvent.cpp.gcno
        -:    0:Data:/home/ioana/second_semester/oop/assignments/a6-913-Gabor-Ioana-1/cmake-build-debug-coverage/CMakeFiles/a6_913_Gabor_Ioana_1.dir/app_tests/TestEvent.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by ioana on 30.03.2023.
        -:    3://
        -:    4:
        -:    5:#include "TestEvent.h"
        -:    6:#include <cassert>
        -:    7:#include "domain/Event.h"
        -:    8:#include "domain/AppExceptions.h"
        -:    9:
function _ZN9TestEvent12testAllEventEv called 1 returned 100% blocks executed 100%
        1:   10:void TestEvent::testAllEvent() {
        1:   11:    TestEvent::testCreateGettersAndSettersEvent();
        1:   11-block  0
call    0 returned 1
        1:   12:    TestEvent::testCopyAndEqualOperatorEvent();
call    0 returned 1
        1:   13:    TestEvent::testToString();
call    0 returned 1
        1:   14:}
        -:   15:
function _ZN9TestEvent32testCreateGettersAndSettersEventEv called 1 returned 100% blocks executed 63%
        1:   16:void TestEvent::testCreateGettersAndSettersEvent() {
        1:   17:    std::string title = "movie night";
        1:   17-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   17-block  1
        1:   18:    std::string description = "movie night";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   18-block  0
        1:   19:    std::string dateAndTime = "/2022/10/23/10:24";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   19-block  0
        1:   20:    int numberOfAttendants = 39;
        1:   21:    std::string link = "https://stackoverflow.com/questions/3385229";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   21-block  0
        1:   22:    Event event = Event(title, description, numberOfAttendants, dateAndTime, link);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   23:    assert(event.getTitle() == title);
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   23-block  2
call    6 never executed
        1:   23-block  3
call    7 returned 1
       1*:   24:    assert(event.getDescription() == description);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   24-block  1
call    6 never executed
        1:   24-block  2
call    7 returned 1
       1*:   25:    assert(event.getDateAndTime() == dateAndTime);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   25-block  1
call    6 never executed
        1:   25-block  2
call    7 returned 1
       1*:   26:    assert(event.getNumberOfAttendants() == numberOfAttendants);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   26-block  1
call    5 never executed
       1*:   27:    assert(event.getLink() == link);
        1:   27-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   27-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   27-block  2
call    6 never executed
        1:   27-block  3
call    7 returned 1
        1:   28:    std::string newTitle = "movie nightfdas";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   28-block  0
        1:   29:    std::string newDescription = "moviefdas night";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   29-block  0
        1:   30:    std::string newDateAndTime = "/2022/10/23/10:25";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   30-block  0
        1:   31:    int newNumberOfAttendants = 43;
        1:   32:    event.setTitle(newTitle);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   33:    assert(event.getTitle() == newTitle);
        1:   33-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   33-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   33-block  2
call    6 never executed
        1:   33-block  3
call    7 returned 1
        1:   34:    event.setDescription(newDescription);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   35:    assert(event.getDescription() == newDescription);
        1:   35-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   35-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   35-block  2
call    6 never executed
        1:   35-block  3
call    7 returned 1
        1:   36:    event.setDateAndTime(newDateAndTime);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   37:    assert(event.getDateAndTime() == newDateAndTime);
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   37-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   37-block  2
call    6 never executed
        1:   37-block  3
call    7 returned 1
        1:   38:    event.setNumberOfAttendants(newNumberOfAttendants);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   39:    assert(event.getNumberOfAttendants() == newNumberOfAttendants);
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   39-block  2
call    5 never executed
        1:   40:    std::string newLink = "https://youtube.com";
        1:   40-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   40-block  1
        1:   41:    event.setLink(newLink);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   42:    assert(event.getLink() == newLink);
        1:   42-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   42-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   42-block  2
call    6 never executed
        1:   42-block  3
call    7 returned 1
        -:   43:    try {
       3*:   44:        event.setLink("    ");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   44-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1 (throw)
    %%%%%:   44-block  1
call    7 never executed
call    8 never executed
        1:   44-block  2
call    9 returned 1
        1:   44-block  3
        1:   44-block  4
call   10 returned 1
        1:   44-block  5
    #####:   45:        assert(false);
call    0 never executed
        1:   46:    } catch (EventException &eventException) {
        1:   46-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   46-block  1
call    2 returned 1
        -:   47:        assert(true);
        1:   48:    }
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   49:    try {
        3:   50:        event.setDateAndTime("");
        1:   50-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   50-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1 (throw)
    $$$$$:   50-block  2
call    7 never executed
call    8 never executed
        1:   50-block  3
call    9 returned 1
        1:   50-block  4
        1:   50-block  5
call   10 returned 1
        1:   50-block  6
    =====:   51:        assert(false);
call    0 never executed
        1:   52:    } catch (EventException &eventException) {
        1:   52-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   52-block  1
call    2 returned 1
        -:   53:        assert(true);
        1:   54:    }
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   55:}
        1:   55-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
    $$$$$:   55-block  1
call    9 never executed
    $$$$$:   55-block  2
call   10 never executed
    $$$$$:   55-block  3
call   11 never executed
    $$$$$:   55-block  4
call   12 never executed
    $$$$$:   55-block  5
call   13 never executed
    $$$$$:   55-block  6
call   14 never executed
    $$$$$:   55-block  7
call   15 never executed
    $$$$$:   55-block  8
call   16 never executed
    $$$$$:   55-block  9
call   17 never executed
        -:   56:
function _ZN9TestEvent29testCopyAndEqualOperatorEventEv called 1 returned 100% blocks executed 57%
        1:   57:void TestEvent::testCopyAndEqualOperatorEvent() {
        1:   58:    std::string title = "movie night";
        1:   58-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   58-block  1
        1:   59:    std::string description = "movie night";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   59-block  0
        1:   60:    std::string dateAndTime = "/2022/10/23/10:24";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   60-block  0
        1:   61:    int numberOfAttendants = 39;
        1:   62:    std::string link = "https://stackoverflow.com/questions/3385229";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   62-block  0
        1:   63:    Event event = Event(title, description, numberOfAttendants, dateAndTime, link);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   64:    Event copyOfEvent = Event(event);
        1:   64-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   65:    assert(copyOfEvent.getTitle() == title);
        1:   65-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   65-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   65-block  2
call    6 never executed
        1:   65-block  3
call    7 returned 1
       1*:   66:    assert(copyOfEvent.getDescription() == description);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   66-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   66-block  1
call    6 never executed
        1:   66-block  2
call    7 returned 1
       1*:   67:    assert(copyOfEvent.getDateAndTime() == dateAndTime);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   67-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   67-block  1
call    6 never executed
        1:   67-block  2
call    7 returned 1
       1*:   68:    assert(copyOfEvent.getLink() == link);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   68-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   68-block  1
call    6 never executed
        1:   68-block  2
call    7 returned 1
       1*:   69:    assert(event == copyOfEvent);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   69-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   69-block  1
call    5 never executed
        1:   70:    copyOfEvent.setTitle("fdas");
        1:   70-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   70-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   70-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:   70-block  3
call    9 never executed
    $$$$$:   70-block  4
    $$$$$:   70-block  5
call   10 never executed
    $$$$$:   70-block  6
       1*:   71:    assert(event != copyOfEvent);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   71-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   71-block  1
call    5 never executed
        1:   72:}
        1:   72-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
    $$$$$:   72-block  1
call    6 never executed
    $$$$$:   72-block  2
call    7 never executed
    $$$$$:   72-block  3
call    8 never executed
    $$$$$:   72-block  4
call    9 never executed
    $$$$$:   72-block  5
call   10 never executed
    $$$$$:   72-block  6
call   11 never executed
        -:   73:
function _ZN9TestEvent12testToStringEv called 1 returned 100% blocks executed 47%
        1:   74:void TestEvent::testToString() {
        1:   75:    std::string expectedString = "Title fdasfdas Description fda Date and timeDate and time /2022/06/23/10:25Link https://www.infoarena.ro/ Number of participants 3";
        1:   75-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   75-block  1
        2:   76:    Event event = Event("fdasfdas", "fda", 3, "/2022/06/23/10:25", "https://www.infoarena.ro/");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   76-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   76-block  1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   76-block  2
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1:   76-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
call   25 returned 1
    $$$$$:   76-block  4
    $$$$$:   76-block  5
    $$$$$:   76-block  6
    $$$$$:   76-block  7
    $$$$$:   76-block  8
    $$$$$:   76-block  9
    $$$$$:   76-block 10
    $$$$$:   76-block 11
       1*:   77:    assert(event.toString() == expectedString);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   77-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   77-block  1
call    6 never executed
        1:   77-block  2
call    7 returned 1
        1:   78:}
call    0 returned 1
call    1 returned 1
    $$$$$:   78-block  0
call    2 never executed
    $$$$$:   78-block  1
call    3 never executed
