        -:    0:Source:/home/ioana/second_semester/oop/assignments/a45-913-Gabor-Ioana/app_tests/TestEvent.cpp
        -:    0:Graph:/home/ioana/second_semester/oop/assignments/a45-913-Gabor-Ioana/cmake-build-debug-coverage/CMakeFiles/a45_913_Gabor_Ioana.dir/app_tests/TestEvent.cpp.gcno
        -:    0:Data:/home/ioana/second_semester/oop/assignments/a45-913-Gabor-Ioana/cmake-build-debug-coverage/CMakeFiles/a45_913_Gabor_Ioana.dir/app_tests/TestEvent.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by ioana on 30.03.2023.
        -:    3://
        -:    4:
        -:    5:#include "TestEvent.h"
        -:    6:#include <cassert>
        -:    7:#include "domain/Event.h"
        -:    8:#include "domain/AppExceptions.h"
        -:    9:
function _ZN9TestEvent12testAllEventEv called 1 returned 100% blocks executed 100%
        1:   10:void TestEvent::testAllEvent() {
        1:   11:    TestEvent::testCreateGettersAndSettersEvent();
        1:   11-block  0
call    0 returned 1
        1:   12:    TestEvent::testCopyAndEqualOperatorEvent();
call    0 returned 1
        1:   13:}
        -:   14:
function _ZN9TestEvent32testCreateGettersAndSettersEventEv called 1 returned 100% blocks executed 61%
        1:   15:void TestEvent::testCreateGettersAndSettersEvent() {
        1:   16:    std::string title = "movie night";
        1:   16-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   16-block  1
        1:   17:    std::string description = "movie night";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   17-block  0
        1:   18:    std::string dateAndTime = "/2022/10/23/10:24";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   18-block  0
        1:   19:    int numberOfAttendants = 39;
        1:   20:    std::string link = "https://stackoverflow.com/questions/3385229";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   20-block  0
        1:   21:    Event event = Event(title, description, numberOfAttendants,dateAndTime,link);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   22:    assert(event.getTitle()==title);
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   22-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   22-block  2
call    6 never executed
        1:   22-block  3
call    7 returned 1
       1*:   23:    assert(event.getDescription()==description);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   23-block  1
call    6 never executed
        1:   23-block  2
call    7 returned 1
       1*:   24:    assert(event.getDateAndTime()==dateAndTime);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   24-block  1
call    6 never executed
        1:   24-block  2
call    7 returned 1
       1*:   25:    assert(event.getNumberOfAttendants()==numberOfAttendants);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   25-block  1
call    5 never executed
       1*:   26:    assert(event.getLink()==link);
        1:   26-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   26-block  2
call    6 never executed
        1:   26-block  3
call    7 returned 1
        1:   27:    std::string newTitle = "movie nightfdas";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   27-block  0
        1:   28:    std::string newDescription = "moviefdas night";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   28-block  0
        1:   29:    std::string newDateAndTime = "/2022/10/23/10:25";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   29-block  0
        1:   30:    int newNumberOfAttendants = 43;
        1:   31:    event.setTitle(newTitle);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   32:    assert(event.getTitle()==newTitle);
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   32-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   32-block  2
call    6 never executed
        1:   32-block  3
call    7 returned 1
        1:   33:    event.setDescription(newDescription);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   34:    assert(event.getDescription()==newDescription);
        1:   34-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   34-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   34-block  2
call    6 never executed
        1:   34-block  3
call    7 returned 1
        1:   35:    event.setDateAndTime(newDateAndTime);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   36:    assert(event.getDateAndTime()==newDateAndTime);
        1:   36-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   36-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   36-block  2
call    6 never executed
        1:   36-block  3
call    7 returned 1
        1:   37:    event.setNumberOfAttendants(newNumberOfAttendants);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   38:    assert(event.getNumberOfAttendants()==newNumberOfAttendants);
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   38-block  2
call    5 never executed
        1:   39:    std::string newLink = "https://youtube.com";
        1:   39-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   39-block  1
        1:   40:    event.setLink(newLink);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   41:    assert(event.getLink()==newLink);
        1:   41-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   41-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   41-block  2
call    6 never executed
        1:   41-block  3
call    7 returned 1
        -:   42:    try{
       3*:   43:        event.setLink("    ");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   43-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1 (throw)
    %%%%%:   43-block  1
call    7 never executed
call    8 never executed
        1:   43-block  2
call    9 returned 1
        1:   43-block  3
        1:   43-block  4
call   10 returned 1
        1:   43-block  5
    #####:   44:        assert(false);
call    0 never executed
        1:   45:    }catch (EventException &eventException){
        1:   45-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   45-block  1
call    2 returned 1
        -:   46:        assert(true);
        1:   47:    }
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   48:}
        1:   48-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
    $$$$$:   48-block  1
call    9 never executed
    $$$$$:   48-block  2
call   10 never executed
    $$$$$:   48-block  3
call   11 never executed
    $$$$$:   48-block  4
call   12 never executed
    $$$$$:   48-block  5
call   13 never executed
    $$$$$:   48-block  6
call   14 never executed
    $$$$$:   48-block  7
call   15 never executed
    $$$$$:   48-block  8
call   16 never executed
    $$$$$:   48-block  9
call   17 never executed
        -:   49:
function _ZN9TestEvent29testCopyAndEqualOperatorEventEv called 1 returned 100% blocks executed 57%
        1:   50:void TestEvent::testCopyAndEqualOperatorEvent() {
        1:   51:    std::string title = "movie night";
        1:   51-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   51-block  1
        1:   52:    std::string description = "movie night";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   52-block  0
        1:   53:    std::string dateAndTime = "/2022/10/23/10:24";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   53-block  0
        1:   54:    int numberOfAttendants = 39;
        1:   55:    std::string link = "https://stackoverflow.com/questions/3385229";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   55-block  0
        1:   56:    Event event = Event(title, description, numberOfAttendants,dateAndTime,link);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57:    Event copyOfEvent = Event(event);
        1:   57-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   58:    assert(copyOfEvent.getTitle()==title);
        1:   58-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   58-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   58-block  2
call    6 never executed
        1:   58-block  3
call    7 returned 1
       1*:   59:    assert(copyOfEvent.getDescription()==description);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   59-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   59-block  1
call    6 never executed
        1:   59-block  2
call    7 returned 1
       1*:   60:    assert(copyOfEvent.getDateAndTime()==dateAndTime);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   60-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   60-block  1
call    6 never executed
        1:   60-block  2
call    7 returned 1
       1*:   61:    assert(copyOfEvent.getLink()==link);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   61-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   61-block  1
call    6 never executed
        1:   61-block  2
call    7 returned 1
       1*:   62:    assert(event == copyOfEvent);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   62-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   62-block  1
call    5 never executed
        1:   63:    copyOfEvent.setTitle("fdas");
        1:   63-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   63-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   63-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:   63-block  3
call    9 never executed
    $$$$$:   63-block  4
    $$$$$:   63-block  5
call   10 never executed
    $$$$$:   63-block  6
       1*:   64:    assert(event != copyOfEvent);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   64-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   64-block  1
call    5 never executed
        1:   65:}
        1:   65-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
    $$$$$:   65-block  1
call    6 never executed
    $$$$$:   65-block  2
call    7 never executed
    $$$$$:   65-block  3
call    8 never executed
    $$$$$:   65-block  4
call    9 never executed
    $$$$$:   65-block  5
call   10 never executed
    $$$$$:   65-block  6
call   11 never executed
