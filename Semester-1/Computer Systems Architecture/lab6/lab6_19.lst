     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 010203030201020302          S1 db 1,2,3,3,2,1,2,3,2
    14                                      l1 equ $ - S1
    15 00000009 0302                        S2 db 3,2
    16                                      l2 equ $ - S2
    17 0000000B <res 00000009>              Sol times l1 resb 1
    18 00000014 <res 00000004>              keepCount resb 4
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 B909000000                      mov ecx, l1
    24 00000005 E347                            jecxz endLoop
    25 00000007 BE[00000000]                    mov esi, S1
    26 0000000C BA00000000                      mov edx, 0
    27 00000011 B800000000                      mov eax, 0  ;eax is the index of the current element in S1
    28                                          For_index:
    29 00000016 890D[14000000]                      mov [keepCount], ecx 
    30 0000001C BF[09000000]                        mov edi, S2 ;load the addres of the first element in S2
    31 00000021 B902000000                          mov ecx, l2
    32 00000026 8DB0[00000000]                      lea esi, [eax+S1] ;load the address of the current element from S1 to esi
    33 0000002C E320                                jecxz endLoop
    34                                              cauta:
    35 0000002E A6                                      cmpsb
    36 0000002F 7514                                    jne NotOk  ;if the elements are not equal, jump to not ok
    37 00000031 81FE[09000000]                          cmp esi, S1 + l1 ;if the end of S1 is reached, the cauta loop is exited
    38 00000037 E0F5                                Loopne cauta
    39 00000039 83F900                              cmp ecx, 0 ; if the cauta loop has been exited and not all the elements from S2 have been considered, jump to not ok
    40 0000003C 7507                                jne NotOk
    41 0000003E 8882[0B000000]                      mov [Sol + edx], al ; if there is a match, then add the corresponding index to the solution
    42 00000044 42                                  inc edx
    43                                              NotOk:
    44 00000045 40                                  inc eax
    45 00000046 8B0D[14000000]                      mov ecx, [keepCount]
    46 0000004C E2C8                            Loop For_index
    47                                          endLoop:
    48                                          ; exit(0)
    49 0000004E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000050 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
